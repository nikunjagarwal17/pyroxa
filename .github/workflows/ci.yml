name: CI Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install PyroXa
      run: |
        pip install -e .
    
    - name: Verify installation
      run: |
        python -c "import pyroxa; print(f'PyroXa v{pyroxa.__version__} installed')"
        python -c "import pyroxa; print(f'Total functions: {len(pyroxa.__all__)}')"
    
    - name: Test core functions
      run: |
        python -c "
        import pyroxa
        # Test arrhenius rate
        k = pyroxa.arrhenius_rate(A=1e10, Ea=50000, T=298.15)
        print(f'Arrhenius rate: {k:.2e}')
        assert k > 0, 'Invalid rate constant'
        
        # Test batch reactor time calculation
        time = pyroxa.batch_reactor_time(initial_conc=1.0, final_conc=0.2, rate_constant=0.15, order=1)
        print(f'Batch reactor time: {time:.2f}')
        assert time > 0, 'Invalid batch reactor time'
        
        # Test CSTR volume calculation
        volume = pyroxa.cstr_volume(flow_rate=10.0, rate_constant=0.5, conversion=0.8, order=1)
        print(f'CSTR volume: {volume:.2f}')
        assert volume > 0, 'Invalid CSTR volume'
        
        # Test heat capacity
        cp = pyroxa.heat_capacity_nasa(T=500.0, coeffs=[3.298677, 0.0014082404, -3.963222e-06, 5.641515e-09, -2.444854e-12])
        print(f'Heat capacity: {cp:.2f} J/mol/K')
        assert cp > 0, 'Invalid heat capacity'
        
        print('All core function tests passed!')
        "
    
    - name: Run test suite (if exists)
      run: |
        if [ -f "tests/quick_test.py" ]; then
          python tests/quick_test.py
        else
          echo "No test suite found, skipping"
        fi
      shell: bash
      continue-on-error: true
